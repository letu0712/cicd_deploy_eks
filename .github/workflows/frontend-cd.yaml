name: frontend-cd

on:
  pull_request:
    branches:
      - main

env:
  NODE_VER: 14
  IMAGE_REPO_FE: frontend
  IMAGE_TAG: latest

jobs:
  run-lint-test:
    name: Run lint frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Nodejs env
        uses: actions/setup-node@v3
        with:
          node-version: ${{env.NODE_VER}}

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies package prettier
        run: |
          npm install
          npm install prettier@2.8.8 --save-dev
        
      - name: Run lint
        run: |
          npm run lint
          npm run test
  deploy-to-ecr:
    name: Build, tag and push docker image to AWS ECR
    runs-on: ubuntu-latest
    needs: [run-lint-test]
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v3
      
      - name: Configure AWS credential use action
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: Login AWS ECR use action
        uses: aws-actions/amazon-ecr-login@v2
        with: 
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
          aws-region: us-east-1

      - name: Build, tag and push docker image to AWS ECR
        run: |
          aws eks update-kubeconfig --name cluster
          kubectl get svc
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          echo "$EXTERNALIP"
          docker build -t ${{env.IMAGE_REPO_FE}} --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNALIP .
          docker tag ${{env.IMAGE_REPO_FE}}:${{env.IMAGE_TAG}} ${{vars.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_FE}}:${{env.IMAGE_TAG}}
          docker push ${{vars.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_FE}}:${{env.IMAGE_TAG}}
          echo "Push docker image FE success"

      - name: Update kubeconfig, deploy to EKS
        run: |
          cd k8s
          kustomize edit set image frontend=${{vars.AWS_ACCOUNT_ID}}.dkr.ecr.us-east-1.amazonaws.com/${{env.IMAGE_REPO_FE}}:${{env.IMAGE_TAG}}
          kustomize build | kubectl apply -f -
          